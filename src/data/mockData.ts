import { Board, Label, Member, Card, ActivityLog } from '../types';

export const predefinedLabels: Label[] = [
  { id: '1', name: 'Urgent', color: '#FF6B6B' },
  { id: '2', name: 'Important', color: '#4ECDC4' },
  { id: '3', name: 'Low Priority', color: '#45B7D1' },
  { id: '4', name: 'Bug', color: '#96CEB4' },
  { id: '5', name: 'Feature', color: '#FFEAA7' },
  { id: '6', name: 'Enhancement', color: '#DDA0DD' },
  { id: '7', name: 'Documentation', color: '#FFB6C1' },
  { id: '8', name: 'Testing', color: '#98FB98' },
];

export const defaultMembers: Member[] = [
  { id: '1', name: 'John Doe', avatar: '', initials: 'JD', email: 'john@example.com' },
  { id: '2', name: 'Jane Smith', avatar: '', initials: 'JS', email: 'jane@example.com' },
  { id: '3', name: 'Mike Johnson', avatar: '', initials: 'MJ', email: 'mike@example.com' },
  { id: '4', name: 'Sarah Wilson', avatar: '', initials: 'SW', email: 'sarah@example.com' },
  { id: '5', name: 'Alex Chen', avatar: '', initials: 'AC', email: 'alex@example.com' },
  { id: '6', name: 'Emma Davis', avatar: '', initials: 'ED', email: 'emma@example.com' },
];

const now = new Date();
const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);

export const mockBoard: Board = {
  id: '1',
  title: 'Product Development Sprint',
  description: 'Main board for tracking product development tasks and sprint progress',
  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  members: defaultMembers,
  createdAt: yesterday,
  updatedAt: now,
  settings: {
    allowComments: true,
    allowVoting: true,
    cardAging: false,
  },
  activityLog: [
    {
      id: '1',
      type: 'card_created',
      description: 'Created card "Design new landing page"',
      user: 'Jane Smith',
      timestamp: yesterday,
      cardId: '1',
      listId: '1',
    },
    {
      id: '2',
      type: 'card_moved',
      description: 'Moved "Implement user authentication" to In Progress',
      user: 'Mike Johnson',
      timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000),
      cardId: '3',
      listId: '2',
    },
  ],
  lists: [
    {
      id: '1',
      title: 'Backlog',
      boardId: '1',
      position: 0,
      wipLimit: 10,
      cards: [
        {
          id: '1',
          title: 'Design new landing page',
          description: 'Create a modern, responsive landing page design that converts visitors into customers. Include hero section, features, testimonials, and clear CTAs.',
          labels: [predefinedLabels[1], predefinedLabels[4]],
          dueDate: nextWeek,
          priority: 'high',
          estimatedHours: 16,
          checklist: [
            { id: '1', text: 'Research competitor designs', completed: true },
            { id: '2', text: 'Create wireframes', completed: false },
            { id: '3', text: 'Design mockups', completed: false },
            { id: '4', text: 'Get stakeholder approval', completed: false },
          ],
          comments: [
            {
              id: '1',
              text: 'Let\'s make sure to include the new branding guidelines and accessibility standards',
              author: 'Jane Smith',
              timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000),
            },
            {
              id: '2',
              text: 'I\'ve added some reference designs to the shared folder',
              author: 'Alex Chen',
              timestamp: new Date(now.getTime() - 1 * 60 * 60 * 1000),
            },
          ],
          members: [defaultMembers[0], defaultMembers[1]],
          listId: '1',
          position: 0,
          createdAt: yesterday,
          updatedAt: now,
          timeEntries: [],
          dependencies: [],
        },
        {
          id: '2',
          title: 'Update API documentation',
          description: 'Update API documentation with new endpoints and authentication methods',
          labels: [predefinedLabels[2], predefinedLabels[6]],
          dueDate: tomorrow,
          priority: 'medium',
          estimatedHours: 8,
          checklist: [
            { id: '5', text: 'Document new endpoints', completed: false },
            { id: '6', text: 'Update authentication section', completed: false },
            { id: '7', text: 'Add code examples', completed: false },
          ],
          comments: [],
          members: [defaultMembers[2]],
          listId: '1',
          position: 1,
          createdAt: yesterday,
          updatedAt: yesterday,
          timeEntries: [],
          dependencies: [],
        },
      ],
    },
    {
      id: '2',
      title: 'In Progress',
      boardId: '1',
      position: 1,
      wipLimit: 3,
      cards: [
        {
          id: '3',
          title: 'Implement user authentication',
          description: 'Add comprehensive login/signup functionality with JWT tokens, password reset, and email verification',
          labels: [predefinedLabels[0], predefinedLabels[4]],
          dueDate: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000),
          priority: 'urgent',
          estimatedHours: 24,
          checklist: [
            { id: '8', text: 'Set up JWT middleware', completed: true },
            { id: '9', text: 'Create login form', completed: true },
            { id: '10', text: 'Add password reset functionality', completed: false },
            { id: '11', text: 'Implement email verification', completed: false },
            { id: '12', text: 'Add OAuth integration', completed: false },
          ],
          comments: [
            {
              id: '3',
              text: 'Working on this now, the JWT middleware is complete. Moving on to password reset next.',
              author: 'Mike Johnson',
              timestamp: new Date(now.getTime() - 30 * 60 * 1000),
            },
          ],
          members: [defaultMembers[2], defaultMembers[3]],
          listId: '2',
          position: 0,
          createdAt: yesterday,
          updatedAt: new Date(now.getTime() - 30 * 60 * 1000),
          timeEntries: [
            {
              id: '1',
              startTime: new Date(now.getTime() - 4 * 60 * 60 * 1000),
              endTime: new Date(now.getTime() - 2 * 60 * 60 * 1000),
              duration: 120,
              description: 'JWT middleware implementation',
            },
          ],
          dependencies: [],
        },
        {
          id: '7',
          title: 'Database optimization',
          description: 'Optimize database queries and add proper indexing for better performance',
          labels: [predefinedLabels[5], predefinedLabels[0]],
          dueDate: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),
          priority: 'high',
          estimatedHours: 12,
          checklist: [
            { id: '20', text: 'Analyze slow queries', completed: true },
            { id: '21', text: 'Add database indexes', completed: false },
            { id: '22', text: 'Optimize JOIN operations', completed: false },
          ],
          comments: [],
          members: [defaultMembers[4]],
          listId: '2',
          position: 1,
          createdAt: yesterday,
          updatedAt: yesterday,
          timeEntries: [],
          dependencies: [],
        },
      ],
    },
    {
      id: '3',
      title: 'Code Review',
      boardId: '1',
      position: 2,
      cards: [
        {
          id: '4',
          title: 'Fix responsive design issues',
          description: 'Address mobile layout problems on product pages and ensure consistent experience across devices',
          labels: [predefinedLabels[3], predefinedLabels[5]],
          dueDate: tomorrow,
          priority: 'medium',
          estimatedHours: 6,
          checklist: [
            { id: '13', text: 'Test on mobile devices', completed: true },
            { id: '14', text: 'Fix CSS breakpoints', completed: true },
            { id: '15', text: 'Cross-browser testing', completed: false },
            { id: '16', text: 'Performance optimization', completed: false },
          ],
          comments: [
            {
              id: '4',
              text: 'The mobile layout looks much better now. Just need to test on Safari.',
              author: 'Emma Davis',
              timestamp: new Date(now.getTime() - 45 * 60 * 1000),
            },
          ],
          members: [defaultMembers[1], defaultMembers[5]],
          listId: '3',
          position: 0,
          createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
          updatedAt: new Date(now.getTime() - 45 * 60 * 1000),
          timeEntries: [
            {
              id: '2',
              startTime: new Date(now.getTime() - 3 * 60 * 60 * 1000),
              endTime: new Date(now.getTime() - 1 * 60 * 60 * 1000),
              duration: 120,
              description: 'Mobile layout fixes',
            },
          ],
          dependencies: [],
        },
      ],
    },
    {
      id: '4',
      title: 'Testing',
      boardId: '1',
      position: 3,
      cards: [
        {
          id: '8',
          title: 'Write unit tests for API endpoints',
          description: 'Create comprehensive unit tests for all API endpoints to ensure reliability',
          labels: [predefinedLabels[7], predefinedLabels[4]],
          dueDate: new Date(now.getTime() + 4 * 24 * 60 * 60 * 1000),
          priority: 'medium',
          estimatedHours: 16,
          checklist: [
            { id: '23', text: 'Test authentication endpoints', completed: false },
            { id: '24', text: 'Test CRUD operations', completed: false },
            { id: '25', text: 'Test error handling', completed: false },
          ],
          comments: [],
          members: [defaultMembers[3]],
          listId: '4',
          position: 0,
          createdAt: yesterday,
          updatedAt: yesterday,
          timeEntries: [],
          dependencies: [{ id: '1', dependsOn: '3', type: 'blocked_by' }],
        },
      ],
    },
    {
      id: '5',
      title: 'Done',
      boardId: '1',
      position: 4,
      cards: [
        {
          id: '5',
          title: 'Set up CI/CD pipeline',
          description: 'Configure automated testing and deployment pipeline with GitHub Actions',
          labels: [predefinedLabels[5], predefinedLabels[4]],
          priority: 'high',
          estimatedHours: 8,
          checklist: [
            { id: '17', text: 'Configure GitHub Actions', completed: true },
            { id: '18', text: 'Set up testing pipeline', completed: true },
            { id: '19', text: 'Configure deployment to staging', completed: true },
          ],
          comments: [
            {
              id: '5',
              text: 'Pipeline is working great! Deployment time reduced by 60% and we have automatic testing on every PR.',
              author: 'Sarah Wilson',
              timestamp: new Date(now.getTime() - 24 * 60 * 60 * 1000),
            },
          ],
          members: [defaultMembers[3]],
          listId: '5',
          position: 0,
          createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
          updatedAt: new Date(now.getTime() - 24 * 60 * 60 * 1000),
          timeEntries: [
            {
              id: '3',
              startTime: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
              endTime: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
              duration: 480,
              description: 'CI/CD pipeline setup',
            },
          ],
          dependencies: [],
        },
        {
          id: '6',
          title: 'Security audit and fixes',
          description: 'Comprehensive security review and implementation of security best practices',
          labels: [predefinedLabels[0], predefinedLabels[5]],
          priority: 'urgent',
          estimatedHours: 20,
          checklist: [
            { id: '26', text: 'Security vulnerability scan', completed: true },
            { id: '27', text: 'Fix identified issues', completed: true },
            { id: '28', text: 'Implement security headers', completed: true },
            { id: '29', text: 'Update dependencies', completed: true },
          ],
          comments: [],
          members: [defaultMembers[0], defaultMembers[4]],
          listId: '5',
          position: 1,
          createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000),
          updatedAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),
          timeEntries: [],
          dependencies: [],
        },
      ],
    },
  ],
};